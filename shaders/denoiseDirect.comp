#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_ray_query : enable
#extension GL_ARB_shader_clock : enable
#extension GL_EXT_shader_image_load_formatted : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_GOOGLE_include_directive : enable

#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require

#include "denoise.glsl"

layout(local_size_x = BlockSizeX, local_size_y = BlockSizeY) in;

vec3 waveletFilter(image2D inImage, ivec2 coord, vec3 norm, vec3 pos, uint matHash, float sigLumin, float sigNormal, float sigDepth, int level) {
    if (matHash == InvalidMatId) {
        return vec3(0.0);
    }
    int step = 1 << level;

    vec3 sum = vec3(0.0);
    float sumWeight = 0.0;

    vec3 color = imageLoad(inImage, coord).rgb;

    for (int j = -2; j <= 2; j++) {
        for (int i = -2; i <= 2; i++) {
            ivec2 q = coord + ivec2(i, j) * step;
            if (q.x >= rtxState.size.x || q.y >= rtxState.size.y ||
                q.x < 0 || q.y < 0) {
                continue;
            }

            vec3 normQ;
            vec3 posQ;
            uint matHashQ;

            loadThisGeometry(q, normQ, posQ, matHashQ, rtxState.size);
            vec3 colorQ = imageLoad(inImage, q).rgb;

            if (matHash != matHashQ || matHashQ == InvalidMatId) {
                continue;
            }

            float var = sigLumin;
            float distColor = abs(luminance(color) - luminance(colorQ));
            float wColor = exp(-distColor / var) + 1e-2;

            float distNorm2 = dot(norm - normQ, norm - normQ);
            float wNorm = min(1.0, exp(-distNorm2 / sigNormal));

            float distPos2 = dot(pos - posQ, pos - posQ);
            float wDepth = exp(-distPos2 / sigDepth) + 1e-2;

            float weight = wColor * wNorm * wDepth * Gaussian5x5[i + 2][j + 2];
            sum += colorQ * weight;
            sumWeight += weight;
        }
    }
    vec3 res = (sumWeight < 1e-5) ? vec3(0.0) : sum / sumWeight;
    if (hasNan(res) || res.x < 0 || res.y < 0 || res.z < 0 ||
        res.x > 1e8 || res.y > 1e8 || res.z > 1e8) {
        res = vec3(0.0);
    }
    return res;
}

void main() {
	ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
    if (coord.x >= rtxState.size.x || coord.y >= rtxState.size.y) {
        return;
    }
    vec3 albedo;
    vec3 norm;
    vec3 pos;
    uint matHash;

    loadThisGeometry(coord, albedo, norm, pos, matHash, rtxState.size);
    
    if (rtxState.denoiseLevel == 0) {
        vec3 res = waveletFilter(DirectResultImage, coord, norm, pos, matHash, rtxState.sigLuminDirect, rtxState.sigNormalDirect, rtxState.sigDepthDirect, 0);
        imageStore(denoiseDirTempA, coord, vec4(res, 1.0));
    }
    else if (rtxState.denoiseLevel == 1) {
        vec3 res = waveletFilter(denoiseDirTempA, coord, norm, pos, matHash, rtxState.sigLuminDirect, rtxState.sigNormalDirect, rtxState.sigDepthDirect, 1);
        imageStore(denoiseDirTempB, coord, vec4(res, 1.0));
    }
    else if (rtxState.denoiseLevel == 2) {
        vec3 res = waveletFilter(denoiseDirTempB, coord, norm, pos, matHash, rtxState.sigLuminDirect, rtxState.sigNormalDirect, rtxState.sigDepthDirect, 2);
        imageStore(denoiseDirTempA, coord, vec4(res, 1.0));
    }
    else if (rtxState.denoiseLevel == 3) {
        vec3 res = waveletFilter(denoiseDirTempA, coord, norm, pos, matHash,  rtxState.sigLuminDirect, rtxState.sigNormalDirect, rtxState.sigDepthDirect, 3);
        res = LDRToHDR(res);
        imageStore(DirectResultImage, coord, vec4(res, 1.0));
    }
}